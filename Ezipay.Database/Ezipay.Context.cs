//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ezipay.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_9ADF60_ewalletEntities : DbContext
    {
        public DB_9ADF60_ewalletEntities()
            : base("name=DB_9ADF60_ewalletEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddDuringPayRecord> AddDuringPayRecords { get; set; }
        public virtual DbSet<AdminKey> AdminKeys { get; set; }
        public virtual DbSet<AdminMobileMoneyLimit> AdminMobileMoneyLimits { get; set; }
        public virtual DbSet<AdminPasswordHistory> AdminPasswordHistories { get; set; }
        public virtual DbSet<AdminPermission> AdminPermissions { get; set; }
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
        public virtual DbSet<AfroBasketData> AfroBasketDatas { get; set; }
        public virtual DbSet<AfroBasketVerifyData> AfroBasketVerifyDatas { get; set; }
        public virtual DbSet<AppDownloadLog> AppDownloadLogs { get; set; }
        public virtual DbSet<BankDetail> BankDetails { get; set; }
        public virtual DbSet<BankList> BankLists { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<Callback> Callbacks { get; set; }
        public virtual DbSet<CallbackListTracking> CallbackListTrackings { get; set; }
        public virtual DbSet<Cardnewaddrequest> Cardnewaddrequests { get; set; }
        public virtual DbSet<CardNoDuplicate> CardNoDuplicates { get; set; }
        public virtual DbSet<CardPaymentRequest> CardPaymentRequests { get; set; }
        public virtual DbSet<CardPaymentRequest_Back> CardPaymentRequest_Back { get; set; }
        public virtual DbSet<CardPaymentResponse> CardPaymentResponses { get; set; }
        public virtual DbSet<Carduseinaddmoney> Carduseinaddmoneys { get; set; }
        public virtual DbSet<Cashdeposituser_addmoney> Cashdeposituser_addmoney { get; set; }
        public virtual DbSet<ChargeBack> ChargeBacks { get; set; }
        public virtual DbSet<Commision> Commisions { get; set; }
        public virtual DbSet<CommisionHistory> CommisionHistories { get; set; }
        public virtual DbSet<CommisionMaster> CommisionMasters { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<EmailVerification> EmailVerifications { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<FAQ> FAQs { get; set; }
        public virtual DbSet<FaqDetail> FaqDetails { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<FeedBackType> FeedBackTypes { get; set; }
        public virtual DbSet<FlightBookingData> FlightBookingDatas { get; set; }
        public virtual DbSet<FlightHotelData> FlightHotelDatas { get; set; }
        public virtual DbSet<freezeuser> freezeusers { get; set; }
        public virtual DbSet<HotelBooking> HotelBookings { get; set; }
        public virtual DbSet<HotelMaster> HotelMasters { get; set; }
        public virtual DbSet<MainCategory> MainCategories { get; set; }
        public virtual DbSet<MasterCardPaymentRequest> MasterCardPaymentRequests { get; set; }
        public virtual DbSet<MerchantCommisionMaster> MerchantCommisionMasters { get; set; }
        public virtual DbSet<MerchantDocument> MerchantDocuments { get; set; }
        public virtual DbSet<MerchantStore> MerchantStores { get; set; }
        public virtual DbSet<MobileMoneySenderDetail> MobileMoneySenderDetails { get; set; }
        public virtual DbSet<Navigation> Navigations { get; set; }
        public virtual DbSet<Notificationalert> Notificationalerts { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<notificationupdate> notificationupdates { get; set; }
        public virtual DbSet<OneTimePassword> OneTimePasswords { get; set; }
        public virtual DbSet<PageInformation> PageInformations { get; set; }
        public virtual DbSet<PasswordUpdateTracking> PasswordUpdateTrackings { get; set; }
        public virtual DbSet<PayMoneyRequest> PayMoneyRequests { get; set; }
        public virtual DbSet<RandomInvoiceNumber> RandomInvoiceNumbers { get; set; }
        public virtual DbSet<RedeemPointsHistory> RedeemPointsHistories { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }
        public virtual DbSet<SessionToken> SessionTokens { get; set; }
        public virtual DbSet<SetTransactionLimit> SetTransactionLimits { get; set; }
        public virtual DbSet<ShareAndEarnDetail> ShareAndEarnDetails { get; set; }
        public virtual DbSet<ShareAndEarnMaster> ShareAndEarnMasters { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
        public virtual DbSet<TempToken> TempTokens { get; set; }
        public virtual DbSet<ThirdPartyPaymentByCard> ThirdPartyPaymentByCards { get; set; }
        public virtual DbSet<tmpSentEmail> tmpSentEmails { get; set; }
        public virtual DbSet<TransactionInitiateRequest> TransactionInitiateRequests { get; set; }
        public virtual DbSet<TransactionKey> TransactionKeys { get; set; }
        public virtual DbSet<TransactionLimitAU> TransactionLimitAUs { get; set; }
        public virtual DbSet<TransactionLog> TransactionLogs { get; set; }
        public virtual DbSet<TransferToBankRequest> TransferToBankRequests { get; set; }
        public virtual DbSet<TransferToBankRequest1> TransferToBankRequest1 { get; set; }
        public virtual DbSet<TransferToBankResponse> TransferToBankResponses { get; set; }
        public virtual DbSet<TransferToBankResponse1> TransferToBankResponse1 { get; set; }
        public virtual DbSet<UserApiKey> UserApiKeys { get; set; }
        public virtual DbSet<UserBlockUnblockDetail> UserBlockUnblockDetails { get; set; }
        public virtual DbSet<UserData> UserDatas { get; set; }
        public virtual DbSet<UserDocument> UserDocuments { get; set; }
        public virtual DbSet<UserReferalWallet> UserReferalWallets { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<WalletMoMoOTP> WalletMoMoOTPs { get; set; }
        public virtual DbSet<WalletService> WalletServices { get; set; }
        public virtual DbSet<WalletSetting> WalletSettings { get; set; }
        public virtual DbSet<WalletTransaction> WalletTransactions { get; set; }
        public virtual DbSet<WalletTransactionDetail> WalletTransactionDetails { get; set; }
        public virtual DbSet<WalletTxnUpdateList> WalletTxnUpdateLists { get; set; }
        public virtual DbSet<WalletUser> WalletUsers { get; set; }
        public virtual DbSet<webhookflutter> webhookflutters { get; set; }
        public virtual DbSet<WrongPassword> WrongPasswords { get; set; }
        public virtual DbSet<Emailverification_5_Dec_2017> Emailverification_5_Dec_2017 { get; set; }
        public virtual DbSet<ErrorLog_06_Dec_2017> ErrorLog_06_Dec_2017 { get; set; }
        public virtual DbSet<MasterWalletService> MasterWalletServices { get; set; }
        public virtual DbSet<senderIdTypetbl> senderIdTypetbls { get; set; }
        public virtual DbSet<tmpVerificationEMail> tmpVerificationEMails { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<WalletService_bkp> WalletService_bkp { get; set; }
        public virtual DbSet<WalletTransaction_Back> WalletTransaction_Back { get; set; }
        public virtual DbSet<WalletTransaction27_Nov_2017> WalletTransaction27_Nov_2017 { get; set; }
        public virtual DbSet<WalletTransactionBack> WalletTransactionBacks { get; set; }
        public virtual DbSet<ViewUserList> ViewUserLists { get; set; }
        public virtual DbSet<ViewVerificationMail> ViewVerificationMails { get; set; }
        public virtual DbSet<vw_walletsummary> vw_walletsummary { get; set; }
        public virtual DbSet<Vw_wallettrans> Vw_wallettrans { get; set; }
        public virtual DbSet<balance161022> balance161022 { get; set; }
    
        [DbFunction("DB_9ADF60_ewalletEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[DB_9ADF60_ewalletEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<GetStats_Result> GetStats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStats_Result>("GetStats");
        }
    
        public virtual ObjectResult<SendVerificationMail_Result> SendVerificationMail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SendVerificationMail_Result>("SendVerificationMail");
        }
    
        public virtual int update_verifyemail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_verifyemail");
        }
    
        public virtual int UpdateStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatus");
        }
    
        public virtual ObjectResult<usp_AccepPayMoneyRquest_Result> usp_AccepPayMoneyRquest(Nullable<long> senderId, Nullable<long> receiverId, string totalAmount, string comments, Nullable<int> addAccountServiceId, Nullable<int> payMoneyRequestId, Nullable<int> transactionTypeInfo)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var addAccountServiceIdParameter = addAccountServiceId.HasValue ?
                new ObjectParameter("AddAccountServiceId", addAccountServiceId) :
                new ObjectParameter("AddAccountServiceId", typeof(int));
    
            var payMoneyRequestIdParameter = payMoneyRequestId.HasValue ?
                new ObjectParameter("PayMoneyRequestId", payMoneyRequestId) :
                new ObjectParameter("PayMoneyRequestId", typeof(int));
    
            var transactionTypeInfoParameter = transactionTypeInfo.HasValue ?
                new ObjectParameter("TransactionTypeInfo", transactionTypeInfo) :
                new ObjectParameter("TransactionTypeInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccepPayMoneyRquest_Result>("usp_AccepPayMoneyRquest", senderIdParameter, receiverIdParameter, totalAmountParameter, commentsParameter, addAccountServiceIdParameter, payMoneyRequestIdParameter, transactionTypeInfoParameter);
        }
    
        public virtual ObjectResult<usp_AccepPayMoneyRquest_back_Result> usp_AccepPayMoneyRquest_back(Nullable<long> senderId, Nullable<long> receiverId, string totalAmount, string comments, Nullable<int> payAccountServiceId, Nullable<int> payMoneyRequestId, Nullable<int> transactionTypeInfo)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var payAccountServiceIdParameter = payAccountServiceId.HasValue ?
                new ObjectParameter("PayAccountServiceId", payAccountServiceId) :
                new ObjectParameter("PayAccountServiceId", typeof(int));
    
            var payMoneyRequestIdParameter = payMoneyRequestId.HasValue ?
                new ObjectParameter("PayMoneyRequestId", payMoneyRequestId) :
                new ObjectParameter("PayMoneyRequestId", typeof(int));
    
            var transactionTypeInfoParameter = transactionTypeInfo.HasValue ?
                new ObjectParameter("TransactionTypeInfo", transactionTypeInfo) :
                new ObjectParameter("TransactionTypeInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccepPayMoneyRquest_back_Result>("usp_AccepPayMoneyRquest_back", senderIdParameter, receiverIdParameter, totalAmountParameter, commentsParameter, payAccountServiceIdParameter, payMoneyRequestIdParameter, transactionTypeInfoParameter);
        }
    
        public virtual ObjectResult<usp_CallbackList_Result> usp_CallbackList(Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CallbackList_Result>("usp_CallbackList", pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_CardAddMoney_Result> usp_CardAddMoney(Nullable<long> senderId, Nullable<long> receiverId, string totalAmount, string transactionNo, Nullable<int> payAccountServiceId, Nullable<int> addAccountServiceId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var transactionNoParameter = transactionNo != null ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(string));
    
            var payAccountServiceIdParameter = payAccountServiceId.HasValue ?
                new ObjectParameter("PayAccountServiceId", payAccountServiceId) :
                new ObjectParameter("PayAccountServiceId", typeof(int));
    
            var addAccountServiceIdParameter = addAccountServiceId.HasValue ?
                new ObjectParameter("AddAccountServiceId", addAccountServiceId) :
                new ObjectParameter("AddAccountServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CardAddMoney_Result>("usp_CardAddMoney", senderIdParameter, receiverIdParameter, totalAmountParameter, transactionNoParameter, payAccountServiceIdParameter, addAccountServiceIdParameter);
        }
    
        public virtual ObjectResult<usp_CardTransactionDetailsUseList_Result> usp_CardTransactionDetailsUseList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CardTransactionDetailsUseList_Result>("usp_CardTransactionDetailsUseList", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_CheckAdminMobileMoneyLimit_Result> usp_CheckAdminMobileMoneyLimit(Nullable<long> minimumAmountFlag, string serviceCode)
        {
            var minimumAmountFlagParameter = minimumAmountFlag.HasValue ?
                new ObjectParameter("MinimumAmountFlag", minimumAmountFlag) :
                new ObjectParameter("MinimumAmountFlag", typeof(long));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckAdminMobileMoneyLimit_Result>("usp_CheckAdminMobileMoneyLimit", minimumAmountFlagParameter, serviceCodeParameter);
        }
    
        public virtual ObjectResult<usp_CommissionListOfAllServices_Result> usp_CommissionListOfAllServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CommissionListOfAllServices_Result>("usp_CommissionListOfAllServices");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CreditDebitUser(Nullable<long> senderId, Nullable<long> receiverId, Nullable<decimal> transactionAmount, string reason, Nullable<int> serviceId, Nullable<System.DateTime> transactionDate, Nullable<bool> isCredit, string txnId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var isCreditParameter = isCredit.HasValue ?
                new ObjectParameter("IsCredit", isCredit) :
                new ObjectParameter("IsCredit", typeof(bool));
    
            var txnIdParameter = txnId != null ?
                new ObjectParameter("TxnId", txnId) :
                new ObjectParameter("TxnId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreditDebitUser", senderIdParameter, receiverIdParameter, transactionAmountParameter, reasonParameter, serviceIdParameter, transactionDateParameter, isCreditParameter, txnIdParameter);
        }
    
        public virtual ObjectResult<usp_DeletedUserList_Result> usp_DeletedUserList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DeletedUserList_Result>("usp_DeletedUserList", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual int usp_DeleteMarchant(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteMarchant", walletUserIdParameter);
        }
    
        public virtual int usp_DeleteSubAdmin(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteSubAdmin", walletUserIdParameter);
        }
    
        public virtual ObjectResult<string> usp_DeleteUser(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DeleteUser", emailIdParameter);
        }
    
        public virtual ObjectResult<usp_DepositorList_Result> usp_DepositorList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DepositorList_Result>("usp_DepositorList", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_DownloadMerchantList_Result> usp_DownloadMerchantList(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DownloadMerchantList_Result>("usp_DownloadMerchantList", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_FAQ_Result> usp_FAQ()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FAQ_Result>("usp_FAQ");
        }
    
        public virtual ObjectResult<usp_FaqDetails_Result> usp_FaqDetails(Nullable<int> faqId)
        {
            var faqIdParameter = faqId.HasValue ?
                new ObjectParameter("FaqId", faqId) :
                new ObjectParameter("FaqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FaqDetails_Result>("usp_FaqDetails", faqIdParameter);
        }
    
        public virtual ObjectResult<usp_FeedBackTypes_Result> usp_FeedBackTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FeedBackTypes_Result>("usp_FeedBackTypes");
        }
    
        public virtual ObjectResult<usp_GetAdminMobileMoneyLimit_Result> usp_GetAdminMobileMoneyLimit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAdminMobileMoneyLimit_Result>("usp_GetAdminMobileMoneyLimit");
        }
    
        public virtual ObjectResult<usp_GetAllTransactionByDate_Result> usp_GetAllTransactionByDate(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllTransactionByDate_Result>("usp_GetAllTransactionByDate", userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllTransactionByDateForAddMoney_Result> usp_GetAllTransactionByDateForAddMoney(string walletUserId)
        {
            var walletUserIdParameter = walletUserId != null ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllTransactionByDateForAddMoney_Result>("usp_GetAllTransactionByDateForAddMoney", walletUserIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllTransactionByDateForAddMoneyReq_Result> usp_GetAllTransactionByDateForAddMoneyReq(string walletUserId)
        {
            var walletUserIdParameter = walletUserId != null ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllTransactionByDateForAddMoneyReq_Result>("usp_GetAllTransactionByDateForAddMoneyReq", walletUserIdParameter);
        }
    
        public virtual ObjectResult<usp_GetBanners_Result> usp_GetBanners()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBanners_Result>("usp_GetBanners");
        }
    
        public virtual ObjectResult<usp_GetBannersFor_User_Result> usp_GetBannersFor_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBannersFor_User_Result>("usp_GetBannersFor_User");
        }
    
        public virtual ObjectResult<Usp_GetChannels_Result> Usp_GetChannels(Nullable<int> serviceCategoryId)
        {
            var serviceCategoryIdParameter = serviceCategoryId.HasValue ?
                new ObjectParameter("ServiceCategoryId", serviceCategoryId) :
                new ObjectParameter("ServiceCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetChannels_Result>("Usp_GetChannels", serviceCategoryIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetChannels_Test_Result> Usp_GetChannels_Test(Nullable<int> serviceCategoryId, string isdCode)
        {
            var serviceCategoryIdParameter = serviceCategoryId.HasValue ?
                new ObjectParameter("ServiceCategoryId", serviceCategoryId) :
                new ObjectParameter("ServiceCategoryId", typeof(int));
    
            var isdCodeParameter = isdCode != null ?
                new ObjectParameter("IsdCode", isdCode) :
                new ObjectParameter("IsdCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetChannels_Test_Result>("Usp_GetChannels_Test", serviceCategoryIdParameter, isdCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetCommisions_Result> usp_GetCommisions(Nullable<long> serviceCategoryId)
        {
            var serviceCategoryIdParameter = serviceCategoryId.HasValue ?
                new ObjectParameter("ServiceCategoryId", serviceCategoryId) :
                new ObjectParameter("ServiceCategoryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCommisions_Result>("usp_GetCommisions", serviceCategoryIdParameter);
        }
    
        public virtual ObjectResult<usp_GetCountry_Result> usp_GetCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCountry_Result>("usp_GetCountry");
        }
    
        public virtual ObjectResult<usp_GetCurrencyLog_Result> usp_GetCurrencyLog(Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCurrencyLog_Result>("usp_GetCurrencyLog", pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_GetCurrencyRate_Result> usp_GetCurrencyRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCurrencyRate_Result>("usp_GetCurrencyRate");
        }
    
        public virtual ObjectResult<usp_GetDetailForBillPayment_Result> usp_GetDetailForBillPayment(Nullable<long> walletUserId, string channel, string iSD, Nullable<int> serviceCategoryId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var iSDParameter = iSD != null ?
                new ObjectParameter("ISD", iSD) :
                new ObjectParameter("ISD", typeof(string));
    
            var serviceCategoryIdParameter = serviceCategoryId.HasValue ?
                new ObjectParameter("ServiceCategoryId", serviceCategoryId) :
                new ObjectParameter("ServiceCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDetailForBillPayment_Result>("usp_GetDetailForBillPayment", walletUserIdParameter, channelParameter, iSDParameter, serviceCategoryIdParameter);
        }
    
        public virtual ObjectResult<usp_GetDocumentDetails_Result> usp_GetDocumentDetails(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDocumentDetails_Result>("usp_GetDocumentDetails", walletUserIdParameter);
        }
    
        public virtual ObjectResult<usp_GetHotels_Result> usp_GetHotels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHotels_Result>("usp_GetHotels");
        }
    
        public virtual ObjectResult<usp_GetInvoiceNumber_Result> usp_GetInvoiceNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetInvoiceNumber_Result>("usp_GetInvoiceNumber");
        }
    
        public virtual ObjectResult<usp_GetMainCategoryList_Result> usp_GetMainCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMainCategoryList_Result>("usp_GetMainCategoryList");
        }
    
        public virtual ObjectResult<usp_GetNotificationalert_Result> usp_GetNotificationalert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationalert_Result>("usp_GetNotificationalert");
        }
    
        public virtual ObjectResult<usp_Getnotificationdata_Result> usp_Getnotificationdata(Nullable<long> walletuserid)
        {
            var walletuseridParameter = walletuserid.HasValue ?
                new ObjectParameter("walletuserid", walletuserid) :
                new ObjectParameter("walletuserid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Getnotificationdata_Result>("usp_Getnotificationdata", walletuseridParameter);
        }
    
        public virtual ObjectResult<usp_getPageInformation_Result> usp_getPageInformation(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getPageInformation_Result>("usp_getPageInformation", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_GetRecent_Receiver_Result> usp_GetRecent_Receiver(Nullable<long> senderId, Nullable<int> serviceId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecent_Receiver_Result>("usp_GetRecent_Receiver", senderIdParameter, serviceIdParameter);
        }
    
        public virtual ObjectResult<usp_GetRedeem_History_Result> usp_GetRedeem_History(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRedeem_History_Result>("usp_GetRedeem_History", walletUserIdParameter);
        }
    
        public virtual ObjectResult<usp_GetSubCategoryList_Result> usp_GetSubCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSubCategoryList_Result>("usp_GetSubCategoryList");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetTotalTransaction(string walletuserId)
        {
            var walletuserIdParameter = walletuserId != null ?
                new ObjectParameter("WalletuserId", walletuserId) :
                new ObjectParameter("WalletuserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetTotalTransaction", walletuserIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTransactionLimitAU_Result> usp_GetTransactionLimitAU(string flag)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTransactionLimitAU_Result>("usp_GetTransactionLimitAU", flagParameter);
        }
    
        public virtual ObjectResult<usp_GetTransactionLimitByUserId_Result> usp_GetTransactionLimitByUserId(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTransactionLimitByUserId_Result>("usp_GetTransactionLimitByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTransferToBankCountry_Result> usp_GetTransferToBankCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTransferToBankCountry_Result>("usp_GetTransferToBankCountry");
        }
    
        public virtual ObjectResult<usp_getUserByEmailId_Result> usp_getUserByEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getUserByEmailId_Result>("usp_getUserByEmailId", emailIdParameter);
        }
    
        public virtual ObjectResult<usp_getUserByWalletuserId_Result> usp_getUserByWalletuserId(Nullable<long> walletuserId)
        {
            var walletuserIdParameter = walletuserId.HasValue ?
                new ObjectParameter("WalletuserId", walletuserId) :
                new ObjectParameter("WalletuserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getUserByWalletuserId_Result>("usp_getUserByWalletuserId", walletuserIdParameter);
        }
    
        public virtual ObjectResult<usp_GetUserDetails_Franco_Result> usp_GetUserDetails_Franco(string mobileNo, string stdCode)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var stdCodeParameter = stdCode != null ?
                new ObjectParameter("StdCode", stdCode) :
                new ObjectParameter("StdCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserDetails_Franco_Result>("usp_GetUserDetails_Franco", mobileNoParameter, stdCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetUserDetails_Ghana_Result> usp_GetUserDetails_Ghana(string mobileNo, string stdCode)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var stdCodeParameter = stdCode != null ?
                new ObjectParameter("StdCode", stdCode) :
                new ObjectParameter("StdCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserDetails_Ghana_Result>("usp_GetUserDetails_Ghana", mobileNoParameter, stdCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> usp_getUserIdByToken(string tokenValue)
        {
            var tokenValueParameter = tokenValue != null ?
                new ObjectParameter("TokenValue", tokenValue) :
                new ObjectParameter("TokenValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("usp_getUserIdByToken", tokenValueParameter);
        }
    
        public virtual ObjectResult<usp_IsdCodes_Result> usp_IsdCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsdCodes_Result>("usp_IsdCodes");
        }
    
        public virtual ObjectResult<usp_IsdCodesAddMonMobMonCountry_Result> usp_IsdCodesAddMonMobMonCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsdCodesAddMonMobMonCountry_Result>("usp_IsdCodesAddMonMobMonCountry");
        }
    
        public virtual ObjectResult<usp_IsdCodesForFrance_Result> usp_IsdCodesForFrance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsdCodesForFrance_Result>("usp_IsdCodesForFrance");
        }
    
        public virtual ObjectResult<usp_IsdCodesForFrance1_Result> usp_IsdCodesForFrance1(string flag)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsdCodesForFrance1_Result>("usp_IsdCodesForFrance1", flagParameter);
        }
    
        public virtual ObjectResult<usp_IsdCodesForXAF_Result> usp_IsdCodesForXAF()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsdCodesForXAF_Result>("usp_IsdCodesForXAF");
        }
    
        public virtual ObjectResult<usp_IsdCodesPayGhanaMobMon_Result> usp_IsdCodesPayGhanaMobMon()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsdCodesPayGhanaMobMon_Result>("usp_IsdCodesPayGhanaMobMon");
        }
    
        public virtual ObjectResult<usp_IsFirstTransaction_Result> usp_IsFirstTransaction(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IsFirstTransaction_Result>("usp_IsFirstTransaction", userIdParameter);
        }
    
        public virtual ObjectResult<usp_MainCategory_Result> usp_MainCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MainCategory_Result>("usp_MainCategory");
        }
    
        public virtual ObjectResult<usp_ManageWalletService_Result> usp_ManageWalletService(Nullable<long> subcategoryId, string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var subcategoryIdParameter = subcategoryId.HasValue ?
                new ObjectParameter("SubcategoryId", subcategoryId) :
                new ObjectParameter("SubcategoryId", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ManageWalletService_Result>("usp_ManageWalletService", subcategoryIdParameter, searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_MarchantPaymentTransactionsDetailWithDateRange_Result> usp_MarchantPaymentTransactionsDetailWithDateRange(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MarchantPaymentTransactionsDetailWithDateRange_Result>("usp_MarchantPaymentTransactionsDetailWithDateRange", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_MerchantList_Result> usp_MerchantList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize, Nullable<int> type)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MerchantList_Result>("usp_MerchantList", searchTextParameter, pageNoParameter, pageSizeParameter, typeParameter);
        }
    
        public virtual ObjectResult<usp_MerchantPayment_Result> usp_MerchantPayment(Nullable<long> senderId, Nullable<long> receiverId, string totalAmount, string comments, Nullable<int> addAccountServiceId, Nullable<int> transactionTypeInfo, Nullable<int> eWalletServiceId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var addAccountServiceIdParameter = addAccountServiceId.HasValue ?
                new ObjectParameter("AddAccountServiceId", addAccountServiceId) :
                new ObjectParameter("AddAccountServiceId", typeof(int));
    
            var transactionTypeInfoParameter = transactionTypeInfo.HasValue ?
                new ObjectParameter("TransactionTypeInfo", transactionTypeInfo) :
                new ObjectParameter("TransactionTypeInfo", typeof(int));
    
            var eWalletServiceIdParameter = eWalletServiceId.HasValue ?
                new ObjectParameter("EWalletServiceId", eWalletServiceId) :
                new ObjectParameter("EWalletServiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MerchantPayment_Result>("usp_MerchantPayment", senderIdParameter, receiverIdParameter, totalAmountParameter, commentsParameter, addAccountServiceIdParameter, transactionTypeInfoParameter, eWalletServiceIdParameter);
        }
    
        public virtual ObjectResult<usp_MerchantPayment_back_Result> usp_MerchantPayment_back(Nullable<long> senderId, Nullable<long> receiverId, string totalAmount, string comments, Nullable<int> addAccountServiceId, Nullable<int> transactionTypeInfo)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var addAccountServiceIdParameter = addAccountServiceId.HasValue ?
                new ObjectParameter("AddAccountServiceId", addAccountServiceId) :
                new ObjectParameter("AddAccountServiceId", typeof(int));
    
            var transactionTypeInfoParameter = transactionTypeInfo.HasValue ?
                new ObjectParameter("TransactionTypeInfo", transactionTypeInfo) :
                new ObjectParameter("TransactionTypeInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MerchantPayment_back_Result>("usp_MerchantPayment_back", senderIdParameter, receiverIdParameter, totalAmountParameter, commentsParameter, addAccountServiceIdParameter, transactionTypeInfoParameter);
        }
    
        public virtual ObjectResult<usp_Merchants_Result> usp_Merchants(Nullable<int> userType, Nullable<long> userId)
        {
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Merchants_Result>("usp_Merchants", userTypeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs_Result> usp_NewFormate_TransactionLogs(Nullable<int> pageNo, Nullable<int> pageSize, string transactionsType, Nullable<long> walletTransactionId, string transactionid, string date, string time, string categoryname, string servicename, string totalAmount, string walletAmount, string name, string accountNo, Nullable<long> walletuserid, string fromDate, string toDate)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var transactionsTypeParameter = transactionsType != null ?
                new ObjectParameter("transactionsType", transactionsType) :
                new ObjectParameter("transactionsType", typeof(string));
    
            var walletTransactionIdParameter = walletTransactionId.HasValue ?
                new ObjectParameter("WalletTransactionId", walletTransactionId) :
                new ObjectParameter("WalletTransactionId", typeof(long));
    
            var transactionidParameter = transactionid != null ?
                new ObjectParameter("transactionid", transactionid) :
                new ObjectParameter("transactionid", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("categoryname", categoryname) :
                new ObjectParameter("categoryname", typeof(string));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(string));
    
            var walletAmountParameter = walletAmount != null ?
                new ObjectParameter("walletAmount", walletAmount) :
                new ObjectParameter("walletAmount", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var walletuseridParameter = walletuserid.HasValue ?
                new ObjectParameter("walletuserid", walletuserid) :
                new ObjectParameter("walletuserid", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs_Result>("usp_NewFormate_TransactionLogs", pageNoParameter, pageSizeParameter, transactionsTypeParameter, walletTransactionIdParameter, transactionidParameter, dateParameter, timeParameter, categorynameParameter, servicenameParameter, totalAmountParameter, walletAmountParameter, nameParameter, accountNoParameter, walletuseridParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs_Download_Result> usp_NewFormate_TransactionLogs_Download(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs_Download_Result>("usp_NewFormate_TransactionLogs_Download", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs_Download_Test_Result> usp_NewFormate_TransactionLogs_Download_Test(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs_Download_Test_Result>("usp_NewFormate_TransactionLogs_Download_Test", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs_Download111_Result> usp_NewFormate_TransactionLogs_Download111(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs_Download111_Result>("usp_NewFormate_TransactionLogs_Download111", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs_Test_Result> usp_NewFormate_TransactionLogs_Test(Nullable<int> pageNo, Nullable<int> pageSize, string transactionsType, Nullable<long> walletTransactionId, string transactionid, string date, string time, string categoryname, string servicename, string totalAmount, string walletAmount, string name, string accountNo, Nullable<long> walletuserid, string fromDate, string toDate)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var transactionsTypeParameter = transactionsType != null ?
                new ObjectParameter("transactionsType", transactionsType) :
                new ObjectParameter("transactionsType", typeof(string));
    
            var walletTransactionIdParameter = walletTransactionId.HasValue ?
                new ObjectParameter("WalletTransactionId", walletTransactionId) :
                new ObjectParameter("WalletTransactionId", typeof(long));
    
            var transactionidParameter = transactionid != null ?
                new ObjectParameter("transactionid", transactionid) :
                new ObjectParameter("transactionid", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("categoryname", categoryname) :
                new ObjectParameter("categoryname", typeof(string));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(string));
    
            var walletAmountParameter = walletAmount != null ?
                new ObjectParameter("walletAmount", walletAmount) :
                new ObjectParameter("walletAmount", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var walletuseridParameter = walletuserid.HasValue ?
                new ObjectParameter("walletuserid", walletuserid) :
                new ObjectParameter("walletuserid", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs_Test_Result>("usp_NewFormate_TransactionLogs_Test", pageNoParameter, pageSizeParameter, transactionsTypeParameter, walletTransactionIdParameter, transactionidParameter, dateParameter, timeParameter, categorynameParameter, servicenameParameter, totalAmountParameter, walletAmountParameter, nameParameter, accountNoParameter, walletuseridParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs1_Result> usp_NewFormate_TransactionLogs1(Nullable<int> pageNo, Nullable<int> pageSize, string transactionsType, Nullable<long> walletTransactionId, string transactionid, string date, string time, string categoryname, string servicename, string totalAmount, string walletAmount, string name, string accountNo, Nullable<long> walletuserid)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var transactionsTypeParameter = transactionsType != null ?
                new ObjectParameter("transactionsType", transactionsType) :
                new ObjectParameter("transactionsType", typeof(string));
    
            var walletTransactionIdParameter = walletTransactionId.HasValue ?
                new ObjectParameter("WalletTransactionId", walletTransactionId) :
                new ObjectParameter("WalletTransactionId", typeof(long));
    
            var transactionidParameter = transactionid != null ?
                new ObjectParameter("transactionid", transactionid) :
                new ObjectParameter("transactionid", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("categoryname", categoryname) :
                new ObjectParameter("categoryname", typeof(string));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(string));
    
            var walletAmountParameter = walletAmount != null ?
                new ObjectParameter("walletAmount", walletAmount) :
                new ObjectParameter("walletAmount", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var walletuseridParameter = walletuserid.HasValue ?
                new ObjectParameter("walletuserid", walletuserid) :
                new ObjectParameter("walletuserid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs1_Result>("usp_NewFormate_TransactionLogs1", pageNoParameter, pageSizeParameter, transactionsTypeParameter, walletTransactionIdParameter, transactionidParameter, dateParameter, timeParameter, categorynameParameter, servicenameParameter, totalAmountParameter, walletAmountParameter, nameParameter, accountNoParameter, walletuseridParameter);
        }
    
        public virtual ObjectResult<usp_NewFormate_TransactionLogs12_Result> usp_NewFormate_TransactionLogs12(Nullable<int> pageNo, Nullable<int> pageSize, string transactionsType, Nullable<long> walletTransactionId, string transactionid, string date, string time, string categoryname, string servicename, string totalAmount, string walletAmount, string name, string accountNo, Nullable<long> walletuserid)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var transactionsTypeParameter = transactionsType != null ?
                new ObjectParameter("transactionsType", transactionsType) :
                new ObjectParameter("transactionsType", typeof(string));
    
            var walletTransactionIdParameter = walletTransactionId.HasValue ?
                new ObjectParameter("WalletTransactionId", walletTransactionId) :
                new ObjectParameter("WalletTransactionId", typeof(long));
    
            var transactionidParameter = transactionid != null ?
                new ObjectParameter("transactionid", transactionid) :
                new ObjectParameter("transactionid", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("categoryname", categoryname) :
                new ObjectParameter("categoryname", typeof(string));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(string));
    
            var walletAmountParameter = walletAmount != null ?
                new ObjectParameter("walletAmount", walletAmount) :
                new ObjectParameter("walletAmount", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(string));
    
            var walletuseridParameter = walletuserid.HasValue ?
                new ObjectParameter("walletuserid", walletuserid) :
                new ObjectParameter("walletuserid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewFormate_TransactionLogs12_Result>("usp_NewFormate_TransactionLogs12", pageNoParameter, pageSizeParameter, transactionsTypeParameter, walletTransactionIdParameter, transactionidParameter, dateParameter, timeParameter, categorynameParameter, servicenameParameter, totalAmountParameter, walletAmountParameter, nameParameter, accountNoParameter, walletuseridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_passwordUpdate_Detail(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_passwordUpdate_Detail", walletUserIdParameter);
        }
    
        public virtual ObjectResult<usp_PayEwalletToEwallet_Result> usp_PayEwalletToEwallet(Nullable<long> senderId, Nullable<long> receiverId, string totalAmount, string comments, Nullable<int> addAccountServiceId, Nullable<int> transactionTypeInfo)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var addAccountServiceIdParameter = addAccountServiceId.HasValue ?
                new ObjectParameter("AddAccountServiceId", addAccountServiceId) :
                new ObjectParameter("AddAccountServiceId", typeof(int));
    
            var transactionTypeInfoParameter = transactionTypeInfo.HasValue ?
                new ObjectParameter("TransactionTypeInfo", transactionTypeInfo) :
                new ObjectParameter("TransactionTypeInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PayEwalletToEwallet_Result>("usp_PayEwalletToEwallet", senderIdParameter, receiverIdParameter, totalAmountParameter, commentsParameter, addAccountServiceIdParameter, transactionTypeInfoParameter);
        }
    
        public virtual ObjectResult<usp_PaymentRequest_Result> usp_PaymentRequest(Nullable<long> senderId, Nullable<long> receiverId, string amount, string comments, Nullable<int> transactionTypeInfo)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(long));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(long));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var transactionTypeInfoParameter = transactionTypeInfo.HasValue ?
                new ObjectParameter("TransactionTypeInfo", transactionTypeInfo) :
                new ObjectParameter("TransactionTypeInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentRequest_Result>("usp_PaymentRequest", senderIdParameter, receiverIdParameter, amountParameter, commentsParameter, transactionTypeInfoParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactionReport_Result> usp_PaymentTransactionReport(Nullable<int> userId, Nullable<int> transactionType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactionReport_Result>("usp_PaymentTransactionReport", userIdParameter, transactionTypeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactionReport_back_Result> usp_PaymentTransactionReport_back(Nullable<int> userId, Nullable<int> transactionType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactionReport_back_Result>("usp_PaymentTransactionReport_back", userIdParameter, transactionTypeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactions_Result> usp_PaymentTransactions(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactions_Result>("usp_PaymentTransactions", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactions_bkp_Result> usp_PaymentTransactions_bkp(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactions_bkp_Result>("usp_PaymentTransactions_bkp", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactions_NewApp_Result> usp_PaymentTransactions_NewApp(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactions_NewApp_Result>("usp_PaymentTransactions_NewApp", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactions_NewApp1_Result> usp_PaymentTransactions_NewApp1(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactions_NewApp1_Result>("usp_PaymentTransactions_NewApp1", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactions_Test_Result> usp_PaymentTransactions_Test(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactions_Test_Result>("usp_PaymentTransactions_Test", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactionsDetailWithDateRange_Result> usp_PaymentTransactionsDetailWithDateRange(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactionsDetailWithDateRange_Result>("usp_PaymentTransactionsDetailWithDateRange", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactionsDetailWithDateRange_back_Result> usp_PaymentTransactionsDetailWithDateRange_back(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactionsDetailWithDateRange_back_Result>("usp_PaymentTransactionsDetailWithDateRange_back", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactionsReportDownloadWithDateRange_Result> usp_PaymentTransactionsReportDownloadWithDateRange(Nullable<int> userId, Nullable<int> transactionType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactionsReportDownloadWithDateRange_Result>("usp_PaymentTransactionsReportDownloadWithDateRange", userIdParameter, transactionTypeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PaymentTransactionsWithDateRange_Result> usp_PaymentTransactionsWithDateRange(Nullable<int> userId, Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTransactionsWithDateRange_Result>("usp_PaymentTransactionsWithDateRange", userIdParameter, transactionTypeParameter, pageNoParameter, pageSizeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_PendingKycUserList_Result> usp_PendingKycUserList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PendingKycUserList_Result>("usp_PendingKycUserList", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_SaveOtp_Result> usp_SaveOtp(string mobileNo, string otp, Nullable<int> otpLimit)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var otpParameter = otp != null ?
                new ObjectParameter("Otp", otp) :
                new ObjectParameter("Otp", typeof(string));
    
            var otpLimitParameter = otpLimit.HasValue ?
                new ObjectParameter("OtpLimit", otpLimit) :
                new ObjectParameter("OtpLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SaveOtp_Result>("usp_SaveOtp", mobileNoParameter, otpParameter, otpLimitParameter);
        }
    
        public virtual int usp_SaveSubadmin(string countries, Nullable<int> userType, Nullable<long> userId, string isdCode, Nullable<int> currencyId, string emailId, string firstName, string lastName, string password, byte[] hashedSalt, string mobileNo, string privateKey, string publicKey)
        {
            var countriesParameter = countries != null ?
                new ObjectParameter("Countries", countries) :
                new ObjectParameter("Countries", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var isdCodeParameter = isdCode != null ?
                new ObjectParameter("IsdCode", isdCode) :
                new ObjectParameter("IsdCode", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var hashedSaltParameter = hashedSalt != null ?
                new ObjectParameter("HashedSalt", hashedSalt) :
                new ObjectParameter("HashedSalt", typeof(byte[]));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var privateKeyParameter = privateKey != null ?
                new ObjectParameter("PrivateKey", privateKey) :
                new ObjectParameter("PrivateKey", typeof(string));
    
            var publicKeyParameter = publicKey != null ?
                new ObjectParameter("PublicKey", publicKey) :
                new ObjectParameter("PublicKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SaveSubadmin", countriesParameter, userTypeParameter, userIdParameter, isdCodeParameter, currencyIdParameter, emailIdParameter, firstNameParameter, lastNameParameter, passwordParameter, hashedSaltParameter, mobileNoParameter, privateKeyParameter, publicKeyParameter);
        }
    
        public virtual ObjectResult<usp_SelectAddMoneyLimit_Result> usp_SelectAddMoneyLimit(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAddMoneyLimit_Result>("usp_SelectAddMoneyLimit", userIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllEmail_Result> usp_SelectAllEmail(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllEmail_Result>("usp_SelectAllEmail", emailIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectTransactionLimit_Result> usp_SelectTransactionLimit(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectTransactionLimit_Result>("usp_SelectTransactionLimit", userIdParameter);
        }
    
        public virtual ObjectResult<usp_ServiceWiseTotalTransaction_Result> usp_ServiceWiseTotalTransaction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceWiseTotalTransaction_Result>("usp_ServiceWiseTotalTransaction");
        }
    
        public virtual int usp_SetAddMoneyLimit(string userId, string transactionLimit)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var transactionLimitParameter = transactionLimit != null ?
                new ObjectParameter("TransactionLimit", transactionLimit) :
                new ObjectParameter("TransactionLimit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetAddMoneyLimit", userIdParameter, transactionLimitParameter);
        }
    
        public virtual int usp_SetTransactionLimit(string userId, string transactionLimit)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var transactionLimitParameter = transactionLimit != null ?
                new ObjectParameter("TransactionLimit", transactionLimit) :
                new ObjectParameter("TransactionLimit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetTransactionLimit", userIdParameter, transactionLimitParameter);
        }
    
        public virtual ObjectResult<usp_subAdminCountries_Result> usp_subAdminCountries(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_subAdminCountries_Result>("usp_subAdminCountries", userIdParameter);
        }
    
        public virtual ObjectResult<usp_SubadminList_Result> usp_SubadminList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubadminList_Result>("usp_SubadminList", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_SubadminNavigation_Result> usp_SubadminNavigation(Nullable<int> subadminId)
        {
            var subadminIdParameter = subadminId.HasValue ?
                new ObjectParameter("SubadminId", subadminId) :
                new ObjectParameter("SubadminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubadminNavigation_Result>("usp_SubadminNavigation", subadminIdParameter);
        }
    
        public virtual ObjectResult<usp_SubCategory_Result> usp_SubCategory(Nullable<long> mainCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubCategory_Result>("usp_SubCategory", mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<usp_SubCategoryForReport_Result> usp_SubCategoryForReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubCategoryForReport_Result>("usp_SubCategoryForReport");
        }
    
        public virtual ObjectResult<usp_SubscriptionLogs_Result> usp_SubscriptionLogs(Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubscriptionLogs_Result>("usp_SubscriptionLogs", pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_TransactionLogs_Result> usp_TransactionLogs(Nullable<int> transactionType, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransactionLogs_Result>("usp_TransactionLogs", transactionTypeParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_txnlist_Result> usp_txnlist(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_txnlist_Result>("usp_txnlist", walletUserIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UpdateCashDepositToBank(string depositorCashAmount, string depositorCountry, Nullable<long> walletUserId, string depositorName, string depositorSlipImage, string totalDepositorAmount)
        {
            var depositorCashAmountParameter = depositorCashAmount != null ?
                new ObjectParameter("DepositorCashAmount", depositorCashAmount) :
                new ObjectParameter("DepositorCashAmount", typeof(string));
    
            var depositorCountryParameter = depositorCountry != null ?
                new ObjectParameter("DepositorCountry", depositorCountry) :
                new ObjectParameter("DepositorCountry", typeof(string));
    
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            var depositorNameParameter = depositorName != null ?
                new ObjectParameter("DepositorName", depositorName) :
                new ObjectParameter("DepositorName", typeof(string));
    
            var depositorSlipImageParameter = depositorSlipImage != null ?
                new ObjectParameter("DepositorSlipImage", depositorSlipImage) :
                new ObjectParameter("DepositorSlipImage", typeof(string));
    
            var totalDepositorAmountParameter = totalDepositorAmount != null ?
                new ObjectParameter("TotalDepositorAmount", totalDepositorAmount) :
                new ObjectParameter("TotalDepositorAmount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UpdateCashDepositToBank", depositorCashAmountParameter, depositorCountryParameter, walletUserIdParameter, depositorNameParameter, depositorSlipImageParameter, totalDepositorAmountParameter);
        }
    
        public virtual int usp_UpdateSubAdminPermission(Nullable<long> navigationId, Nullable<long> subAdminId)
        {
            var navigationIdParameter = navigationId.HasValue ?
                new ObjectParameter("NavigationId", navigationId) :
                new ObjectParameter("NavigationId", typeof(long));
    
            var subAdminIdParameter = subAdminId.HasValue ?
                new ObjectParameter("SubAdminId", subAdminId) :
                new ObjectParameter("SubAdminId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateSubAdminPermission", navigationIdParameter, subAdminIdParameter);
        }
    
        public virtual ObjectResult<usp_UserDetailById_Result> usp_UserDetailById(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserDetailById_Result>("usp_UserDetailById", userIdParameter);
        }
    
        public virtual ObjectResult<usp_UserDetailByToken_Result> usp_UserDetailByToken(string tokenValue)
        {
            var tokenValueParameter = tokenValue != null ?
                new ObjectParameter("TokenValue", tokenValue) :
                new ObjectParameter("TokenValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserDetailByToken_Result>("usp_UserDetailByToken", tokenValueParameter);
        }
    
        public virtual ObjectResult<usp_UserList_Result> usp_UserList(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserList_Result>("usp_UserList", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_UserList_Test_Result> usp_UserList_Test(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserList_Test_Result>("usp_UserList_Test", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_UserList1_Result> usp_UserList1(string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserList1_Result>("usp_UserList1", searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_UserListDownload_Result> usp_UserListDownload(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserListDownload_Result>("usp_UserListDownload", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<usp_UserNavigation_Result> usp_UserNavigation(Nullable<int> userId, Nullable<int> userType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserNavigation_Result>("usp_UserNavigation", userIdParameter, userTypeParameter);
        }
    
        public virtual ObjectResult<usp_UserPayMoneyRequests_Result> usp_UserPayMoneyRequests(Nullable<long> walletUserId, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserPayMoneyRequests_Result>("usp_UserPayMoneyRequests", walletUserIdParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_WalletService_Result> usp_WalletService(Nullable<long> subcategoryId, string searchText, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var subcategoryIdParameter = subcategoryId.HasValue ?
                new ObjectParameter("SubcategoryId", subcategoryId) :
                new ObjectParameter("SubcategoryId", typeof(long));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WalletService_Result>("usp_WalletService", subcategoryIdParameter, searchTextParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_WalletServiceList_Result> usp_WalletServiceList(Nullable<long> subcategoryId)
        {
            var subcategoryIdParameter = subcategoryId.HasValue ?
                new ObjectParameter("SubcategoryId", subcategoryId) :
                new ObjectParameter("SubcategoryId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WalletServiceList_Result>("usp_WalletServiceList", subcategoryIdParameter);
        }
    
        public virtual ObjectResult<usp_WalletSummary_Result> usp_WalletSummary(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string isdcode)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var isdcodeParameter = isdcode != null ?
                new ObjectParameter("Isdcode", isdcode) :
                new ObjectParameter("Isdcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WalletSummary_Result>("usp_WalletSummary", dateFromParameter, dateToParameter, isdcodeParameter);
        }
    
        public virtual ObjectResult<usp_WalletSummaryByService_Result> usp_WalletSummaryByService(Nullable<int> walletServiceId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var walletServiceIdParameter = walletServiceId.HasValue ?
                new ObjectParameter("WalletServiceId", walletServiceId) :
                new ObjectParameter("WalletServiceId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WalletSummaryByService_Result>("usp_WalletSummaryByService", walletServiceIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int usp_WalletUser_Delete(Nullable<long> walletUserId)
        {
            var walletUserIdParameter = walletUserId.HasValue ?
                new ObjectParameter("WalletUserId", walletUserId) :
                new ObjectParameter("WalletUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WalletUser_Delete", walletUserIdParameter);
        }
    }
}
